javascript: (() => {    var mlToolBox = function(){  /* a tool for displaying your current location in a consistent location while moving */  this.player = ig.game.player;  this.position = {};  this.unitSize = ig.game.tileSize; /* Can later add interface for changing the unit size (data blocks, pixels, etc.) */  this.offset = { /* to set the point of reference.  This measures from spawn */   x : 0,   y : -50  };  this.buildInterface();  var me = this;  this.refreshInterval = setInterval(function(){   me.refresh();  }, 200); } mlToolBox.prototype.cleanup = function(){  clearInterval(this.refreshInterval);  this.elements.wrapper.remove();  } mlToolBox.prototype.getPlayerPosition = function(){  return {   x : Math.round((this.player.pos.x + this.offset.x) / this.unitSize),   y : Math.round((this.player.pos.y + this.offset.y) / this.unitSize)  }; } mlToolBox.prototype.moveTo = function(x, y){  this.position = {   x : (this.offset.x + x) * this.unitSize,   y : (this.offset.y + y) * this.unitSize  };  this.player.pos = {x : this.position.x, y : this.position.y}; } mlToolBox.prototype.refresh = function(){  this.position = this.getPlayerPosition();  this.render(); } mlToolBox.prototype.render = function(){  let pos = this.getPlayerPosition();  this.elements.posDisplay.innerHTML = ('x: ' + pos.x + ', y: ' + (pos.y - this.offset.y + 2)); } mlToolBox.prototype.buildInterface = function(){  /* first well add a CSS to the DOM */  this.buildCSS();  /* Now we'll create our elements */  let posInput = this.buildPosInput();  this.elements = {   wrapper : this.buildWrapper(),   innerWrapper : this.buildInnerWrapper(),   posDisplay : this.buildPosDisplay(),   posInput : {    wrapper : posInput,    xInput : posInput.querySelector('#xPosInput'),    yInput : posInput.querySelector('#yPosInput')   }  };  /* and assemble them into the appropriate structure */  /* add the inner content container to the wrapper */  this.elements.wrapper.appendChild(this.elements.innerWrapper);  /* add the position display */  this.elements.innerWrapper.appendChild(this.elements.posDisplay);  /* add the position input */  this.elements.innerWrapper.appendChild(this.elements.posInput.wrapper);    /* finally stick the wrapper on to the body */  document.body.appendChild(this.elements.wrapper); } mlToolBox.prototype.goToInputLocation = function(){  this.moveTo(   1 * this.elements.posInput.xInput.value,   1 * this.elements.posInput.yInput.value  ); } mlToolBox.prototype.buildWrapper = function(){  let rval = document.createElement('div');  rval.id = 'MLToolBox';  return rval; } mlToolBox.prototype.buildInnerWrapper = function(){  let rval = document.createElement('div');  return rval; } mlToolBox.prototype.buildPosDisplay = function(){  let rval = document.createElement('div');  rval.id = 'MLToolBoxPosDisplay';  return rval; } mlToolBox.prototype.buildPosInput = function(){  let rval = document.createElement('div');  rval.classList.add('sectionWrap');  rval.innerHTML = %60   %3Ch2%3EGo to:%3C/h2%3E   %3Cdiv style=%22margin: 1mm%22%3E    %3Clabel for=%22xPosInput%22%3Ex: %3C/label%3E%3Cinput class=%22MLToolBoxPosInput%22 id=%22xPosInput%22 type=%22text%22%3E   %3C/div%3E   %3Cdiv style=%22margin: 1mm%22%3E    %3Clabel for=%22yPosInput%22%3Ey: %3C/label%3E%3Cinput class=%22MLToolBoxPosInput%22 id=%22yPosInput%22 type=%22text%22%3E   %3C/div%3E  %60;  /* add a go button */  let button = document.createElement('button');  button.innerHTML = %22Transport%22;  var me = this;  button.onclick = function(e){ me.goToInputLocation.call(me)};  rval.appendChild(button);  for(let elem of rval.querySelectorAll('input')){   elem.onchange = funct
