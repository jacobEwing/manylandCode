javascript: (() => {    var mlToolBox = function(){  /* a tool for displaying your current location in a consistent location while moving */  this.player = ig.game.player;  this.position = {};  this.unitSize = ig.game.tileSize; /* Can later add interface for changing the unit size (data blocks, pixels, etc.) */  this.offset = { /* to set the point of reference.  This measures from spawn */   x : 0,   y : -50  };  this.buildInterface();  var me = this;  this.refreshInterval = setInterval(function(){   me.refresh();  }, 200); } mlToolBox.prototype.cleanup = function(){  clearInterval(this.refreshInterval);  this.elements.wrapper.remove();  } mlToolBox.prototype.getPlayerPosition = function(){  return {   x : Math.round((this.player.pos.x + this.offset.x) / this.unitSize),   y : Math.round((this.player.pos.y + this.offset.y) / this.unitSize)  }; } mlToolBox.prototype.moveTo = function(x, y){  this.position = {   x : (this.offset.x + x) * this.unitSize,   y : (this.offset.y + y) * this.unitSize  };  this.player.pos = {x : this.position.x, y : this.position.y}; } mlToolBox.prototype.refresh = function(){  this.position = this.getPlayerPosition();  this.render(); } mlToolBox.prototype.render = function(){  let pos = this.getPlayerPosition();  this.elements.posDisplay.innerHTML = ('x: ' + pos.x + ', y: ' + (pos.y - this.offset.y + 2)); } mlToolBox.prototype.buildInterface = function(){  /* first well add a CSS to the DOM */  this.buildCSS();  /* Now we'll create our elements */  let posInput = this.buildPosInput();  this.elements = {   wrapper : this.buildWrapper(),   innerWrapper : this.buildInnerWrapper(),   posDisplay : this.buildPosDisplay(),   posInput : {    wrapper : posInput,    xInput : posInput.querySelector('#xPosInput'),   yInput : posInput.querySelector('#yPosInput')   }  };  /* and assemble them into the appropriate structure */  /* add the inner content container to the wrapper */  this.elements.wrapper.appendChild(this.elements.innerWrapper);  /* add the position display */  this.elements.innerWrapper.appendChild(this.elements.posDisplay);  /* add the position input */  this.elements.innerWrapper.appendChild(this.elements.posInput.wrapper);    /* finally stick the wrapper on to the body */  document.body.appendChild(this.elements.wrapper); } mlToolBox.prototype.goToInputLocation = function(){  this.moveTo(   1 * this.elements.posInput.xInput.value,   1 * this.elements.posInput.yInput.value  ); } mlToolBox.prototype.buildWrapper = function(){  let rval = document.createElement('div');  rval.id = 'MLToolBox';  return rval; } mlToolBox.prototype.buildInnerWrapper = function(){  let rval = document.createElement('div');  return rval; } mlToolBox.prototype.buildPosDisplay = function(){  let rval = document.createElement('div');  rval.id = 'MLToolBoxPosDisplay';  return rval; } mlToolBox.prototype.buildPosInput = function(){  let rval = document.createElement('div');  rval.classList.add('sectionWrap');  rval.innerHTML = %60   %3Ch2%3EGo to:%3C/h2%3E   %3Cdiv style=%22margin: 1mm%22%3E    %3Clabel for=%22xPosInput%22%3Ex: %3C/label%3E%3Cinput class=%22MLToolBoxPosInput%22 id=%22xPosInput%22 type=%22text%22%3E   %3C/div%3E   %3Cdiv style=%22margin: 1mm%22%3E    %3Clabel for=%22yPosInput%22%3Ey: %3C/label%3E%3Cinput class=%22MLToolBoxPosInput%22 id=%22yPosInput%22 type=%22text%22%3E   %3C/div%3E  %60;  /* add a go button */  let button = document.createElement('button');  button.innerHTML = %22Transport%22;  var me = this;  button.onclick = function(e){ me.goToInputLocation.call(me)};  rval.appendChild(button);  for(let elem of rval.querySelectorAll('input')){   elem.onchange = function(){    /* use regex to ensure we only use positive or negative integers */    let matches = this.value.match(/(-?\d+)/);    if(matches == null){     this.value = 0;    }else{     this.value = matches[0];    }   }  }  return rval; } mlToolBox.prototype.buildCSS = function(){  this.style = document.createElement('style');  this.style.type = 'text/css';  this.style.innerHTML = %60   #MLToolBox {    display : inline-block;    border-radius : 0 2mm 2mm 0;    background-color : #0008;    border : 1px solid #aaa;    color : #cefff1;    border : 1px solid #000;    position : absolute;    left : 0;    top : 0;    font-family : sans-serif;    min-width : 2cm;    height: 100%;    overflow: hidden;    padding : 2mm;   }   #MLToolBox %3E div {    width : 100%;    display: grid;    grid-template-columns: 1fr;    gap: 4px 4px;    grid-auto-flow: row;   }   #MLToolBox button {    border : 1px solid #655;    border-radius : 1mm;    padding : 1mm;    box-shadow : rgb(0 0 0 / 17%) 0px -2.3px 2.5px 0px inset, rgb(0 0 0 / 15%) 0px -3.6px 3.0px 0px inset, rgb(0 0 0 / 10%) 0px -7.9px 4.0px 0px inset, rgb(0 0 0 / 6%) 0px 2px 1px, rgb(0 0 0 / 9%) 0px 4px 2px;    background-color : #fff;    font-size: 1.2em;    padding: 0 1em;   }   #MLToolBox input[type=%22text%22] {    width: 6em;    height: 2em;   }   #MLToolBox h2 {    padding: 0;    margin: 0 2mm;    font-size: 1.5em;   }   .sectionWrap {    background-color: #fff4;    border: 1px solid #888;    margin: 1mm 0;    border-radius: 1mm;   }   #MLToolBoxPosDisplay {    border: 1px solid #666;    background-color : #aaa;    color : #000;    height: 2em;    line-height: 2em;   }   #MLToolBoxPosInput {   }   #MLToolBoxPosInput input {    width : 5em;    height: 2em;    line-height: 2em;   }  %60;  document.getElementsByTagName('head')[0].appendChild(this.style); } var MLTB = new mlToolBox();  }) ()
